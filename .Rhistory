?help
help(plyr)
?plyr
rm(list=ls())
install.packages('gdata')
install.packages('ggplot2')
install.packages('reshape')
install.packages('plyr')
read.edf <- function(filename, read.annotations = TRUE, header.only = FALSE) {
## Read headers
edf.file      <- file(filename, "rb")
header.global <- parse.edf.global.header(readBin(edf.file, "raw", size = 1, n = 256, signed = FALSE, endian = "little"))
header.signal <- parse.edf.signal.header(readBin(edf.file, "raw", size = 1, n = header.global$n.signals*256, signed = FALSE, endian = "little"), header.global = header.global)
## Only return the header
if (header.only) {
edf <- list("header.global" = header.global, "header.signal" = header.signal)
close(edf.file)
return(edf)
}
## Preallocate signal vectors
signal.sample.count <- 1 + numeric(length = header.global$n.signals)
signal <- vector(mode = "list", length = header.global$n.signals)
for (i in seq.int(header.global$n.signals)) {
signal[[i]]       <- list()
signal[[i]]$data  <- vector(mode = "numeric", length = header.signal[[i]]$n.samples * header.global$n.data.records)
signal[[i]]$t     <- (0:(length(signal[[i]]$data)-1)) / header.signal[[i]]$samplingrate
names(signal)[i]  <- header.signal[[i]]$label
}
## Does the measurement have annotations?
if ((header.global$reserved %in% c("EDF+C", "EDF+D")) & ("EDF_Annotations" %in% names(header.signal))) {
annotations_id  <- which(names(header.signal) == "EDF_Annotations")
data <- vector(mode = "list", header.global$n.data.records)
} else {
annotations_id <- FALSE
}
## Read signal data
samples.max.1   <- length(signal[[1]]$data)
signal.seq      <- seq.int(header.global$n.signals)
annotation.data <- vector(mode = "list", length = header.global$n.data.records)
j  <- 1
ac <- 1
while (signal.sample.count[1] <= samples.max.1) {
for (i in signal.seq) {
if (i == annotations_id) {
tmp <- readBin(edf.file, integer(), size = 1, n = 2*header.signal[[i]]$n.samples, signed = FALSE, endian = "little")
annotation.data[[ac]] <- tmp
signal[[i]]$data[signal.sample.count[i]:(signal.sample.count[i] + 2*header.signal[[i]]$n.samples - 1)] <- tmp
ac <- ac + 1
} else {
signal[[i]]$data[signal.sample.count[i]:(signal.sample.count[i] + header.signal[[i]]$n.samples - 1)] <- readBin(edf.file, integer(), size = 2, n = header.signal[[i]]$n.samples, signed = TRUE, endian = "little")
}
signal.sample.count[i] <- signal.sample.count[i] + header.signal[[i]]$n.samples
}
}
close(edf.file)
## Scale the signals properly
for (i in names(signal)) {
signal[[i]]$data  <- (signal[[i]]$data  - header.signal[[i]]$digital.minimum ) * header.signal[[i]]$gain + header.signal[[i]]$physical.minimum
}
## Create an EDF structure that will be returned
edf <- list("header.global" = header.global, "header.signal" = header.signal, "signal" = signal, "events" = NA)
## Read annotations
if (read.annotations) {
if (annotations_id) {
## Clean up the EDF structure
edf$events                        <- parse.edf.annotations(annotation.data)
edf$header.signal$EDF_Annotations <- NULL
edf$signal$EDF_Annotations        <- NULL
}
}
edf
}
read.edf
library(lubridate)
library(plyr)
library(dplyr)
library(fitbitScraper)
hr_data = list(time = c(), hrate = c())
cookie = login("my@email.com", "mypassword", rememberMe = TRUE)
startdate = as.Date('2015-08-07', format = "%Y-%m-%d")
enddate = today()
s = seq(startdate, enddate, by="days")
for (i in 1:length(s)) {
df = get_intraday_data(cookie, "heart-rate", date=sprintf("%s",s[i]))
names(df) = c("time","hrate")
hr_data = rbind(hr_data, df)
rm(df)}
library(lubridate)
library(plyr)
library(dplyr)
library(fitbitScraper)
library(lubridate)
install.packages(lubridate)
install.packages(plyr)
install.packages(dplyr)
install.packages(fitbitScraper)
install.packages('lubridate')
install.packages('plyr')
install.packages('dplyr')
rm(list=ls())
install.packages('lubridate')
install.packages('plyr')
install.packages('dplyr')
install.packages('fitbitScraper')
library(lubridate)
library(plyr)
library(dplyr)
library(fitbitScraper)
hr_data = list(time = c(), hrate = c())
cookie = login("ryancduggan@gmail.com", "ARDennes1944!", rememberMe = TRUE)
startdate = as.Date('2015-10-21', format = "%Y-%m-%d")
enddate = today()
s = seq(startdate, enddate, by="days")
for (i in 1:length(s)) {
df = get_intraday_data(cookie, "heart-rate", date=sprintf("%s",s[i]))
names(df) = c("time","hrate")
hr_data = rbind(hr_data, df)
rm(df)}
completeness = hr_data %>% group_by(dte = as.Date(time)) %>% summarise(comp = mean(hrate > 0))
incomp.days = which(completeness$comp < .9)
missing.days = which(s %in% completeness$dte == FALSE)
days.to.process = c(incomp.days, missing.days)
rm(list=ls())
hr_data = list(time = c(), hrate = c())
cookie = login("ryancduggan@gmail.com", "ARDennes1944!", rememberMe = TRUE)
startdate = as.Date('2015-10-21', format = "%Y-%m-%d")
enddate = today()
s = seq(startdate, enddate, by="days")
completeness = hr_data %>% group_by(dte = as.Date(time)) %>% summarise(comp = mean(hrate > 0))
incomp.days = which(completeness$comp < .9)
missing.days = which(s %in% completeness$dte == FALSE)
days.to.process = c(incomp.days, missing.days)
completeness = hr_data %>% group_by(dte = as.Date(time)) %>% summarise(comp = mean(hrate > 0))
rm(list=ls())
library(fitbitScraper)
cookie <- login(email="ryancduggan@gmail.com", password="ARDennes1944!")
# 15_min_data "what" options: "steps", "distance", "floors", "active-minutes", "calories-burned"
df <- get_intraday_data(cookie, what="steps", date="2015-01-21")
library("ggplot2")
ggplot(df) + geom_bar(aes(x=time, y=data, fill=data), stat="identity") +
xlab("") +ylab("steps") +
theme(axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background=element_blank(),
panel.grid.major.y=element_line(colour="gray", size=.1),
legend.position="none")
# daily_data "what" options: "steps", "distance", "floors", "minutesVery", "caloriesBurnedVsIntake"
df <- get_daily_data(cookie, what="steps", start_date="2015-01-13", end_date="2015-01-20")
ggplot(df) + geom_point(aes(x=time, y=data))
cookie <- login(email="ryancduggan@gmail.com", password="ARDennes1944!")
cookie <- login(email='ryancduggan@gmail.com', password='ARDennes1944!')
cookie <- login(email=ryancduggan@gmail.com, password=ARDennes1944!)
cookie <- login(email='ryancduggan@gmail.com', password='ARDennes1944!)
cookie <- login(email='ryancduggan@gmail.com', password='ARDennes1944!')
cookie <- login(email='ryancduggan@gmail.com', password='ARDennes1944!')
url = http://ett.cdm.highlandstech.net/dbase/ett/_upload/unmatched/
url = "http://ett.cdm.highlandstech.net/dbase/ett/_upload/unmatched/"
zips <- XML::getHTMLLinks(
url,
xpQuery = "//a/@href['.txt'=substring(., string-length(.) - 3)]"
)
## create a new directory 'myzips' to hold the downloads
dir.create("myzips")
## save the current directory path for later
wd <- getwd()
## change working directory for the download
setwd("myzips")
## create all the new files
file.create(zips)
## download them all
lapply(paste0(url, zips), function(x) download.file(x, basename(x)))
## reset working directory to original
setwd(wd)
zips <- XML::getHTMLLinks(
url,
xpQuery = "//a/@href['.zip'=substring(., string-length(.) - 3)]"
)
## create a new directory 'myzips' to hold the downloads
dir.create("myzips")
## save the current directory path for later
wd <- getwd()
## change working directory for the download
setwd("myzips")
## create all the new files
file.create(zips)
## download them all
lapply(paste0(url, zips), function(x) download.file(x, basename(x)))
## reset working directory to original
setwd(wd)
library(rvest)
library(httr)
library(pbapply)
library(stringi)
pg <- read_html(URL)
zips <- grep("muay", html_attr(html_nodes(pg, "a[href^='TAB']"), "href"), value=TRUE)
invisible(pbsapply(zips, function(zip_file) {
GET(URL %s+% zip_file, write_disk(zip_file))
}))
install.packages("rvest")
install.packages("httr")
install.packages("pbapply")
install.packages("stringi")
install.packages("httr")
install.packages("stringi")
library("rvest")
library("httr")
library("pbapply")
library("stringi")
pg <- read_html(URL)
pg <- read_html(url)
zips <- grep("muay", html_attr(html_nodes(pg, "a[href^='TAB']"), "href"), value=TRUE)
invisible(pbsapply(zips, function(zip_file) {
GET(URL %s+% zip_file, write_disk(zip_file))
}))
setwd("~/R_projects/MiscStuff/src")
